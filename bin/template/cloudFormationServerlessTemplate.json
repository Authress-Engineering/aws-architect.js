{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS Architect Microservice",
  "Parameters": {
    "serviceName": {
      "Type": "String",
      "Description": "The name of the microservice"
    },
    "serviceDescription": {
      "Type": "String",
      "Description": "Service description used for AWS resources"
    },
    "deploymentBucketName": {
      "Type": "String",
      "Description": "The bucket where deployment artifacts are kept"
    },
    "deploymentKeyName": {
      "Type": "String",
      "Description": "The location of the s3 lambda.zip file in the bucket"
    },
    "dnsName": {
      "Type": "String",
      "Default": "",
      "Description": "The service DNS name."
    },
    "hostedName": {
      "Type": "String",
      "Description": "The top level domain name."
    }
  },

  "Resources": {
    "EncryptionKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": { "Fn::Sub": "Key for ${serviceName}"},
        "Enabled": true,
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "root-key-policy",
          "Statement": [{
            "Sid": "Enable IAM User Permissions",
            "Effect": "Allow",
            "Principal": {
              "AWS": { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:root" }
            },
            "Action": "kms:*",
            "Resource": "*"
          }]
        }
      }
    },
    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": { "Ref": "serviceName" },
        "Description": { "Ref": "serviceDescription" },
        "Handler": "index.handler",
        "Runtime": "nodejs12.x",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Code": {
          "S3Bucket": { "Fn::Sub": "${deploymentBucketName}" },
          "S3Key": { "Ref": "deploymentKeyName" }
        },
        "MemorySize": 256,
        "Timeout": 60,
        "Role": { "Fn::GetAtt": ["LambdaRole", "Arn"] },
        "Tags": [
          {
            "Key": "Service",
            "Value": { "Ref": "serviceName" }
          }
        ]
      }
    },
    "LambdaFunctionVersion": {
      "Type": "AWS::Lambda::Version",
      "Properties": {
        "FunctionName": { "Ref": "LambdaFunction" },
        "Description": "Initial Production Deployed Version"
      }
    },
    "ProductionAlias": {
      "Type": "AWS::Lambda::Alias",
      "Properties": {
        "Description": "The production alias",
        "FunctionName": { "Fn::GetAtt": ["LambdaFunction", "Arn"] },
        "FunctionVersion": { "Fn::GetAtt": ["LambdaFunctionVersion", "Version"] },
        "Name": "production"
      }
    },
    "LambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Ref": "ProductionAlias" },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": { "Fn::Sub": "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*" }
      }
    },
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": { "Fn::Sub": "${serviceName}LambdaRole" },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "lambda.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ],
        "Policies": [
          {
            "PolicyName": "MicroservicePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "DynamoDbWrite",
                  "Effect": "Allow",
                  "Action": "dynamodb:*",
                  "Resource": { "Fn::Sub": "arn:aws:dynamodb:*:*:table/${serviceName}-*" }
                },
                {
                  "Sid": "DynamoDbWritePreventDelete",
                  "Effect": "Deny",
                  "Action": [
                    "dynamodb:DeleteBackup",
                    "dynamodb:DeleteTable",
                    "sqs:DeleteQueue",
                    "sqs:PurgeQueue"
                  ],
                  "Resource": "*"
                },
                {
                  "Sid": "KMSdecryption",
                  "Effect": "Allow",
                  "Action": "kms:Decrypt",
                  "Resource": { "Fn::Sub": "${EncryptionKey.Arn}" }
                },
                {
                  "Sid": "SQSReader",
                  "Effect": "Allow",
                  "Action": "sqs:*",
                  "Resource": { "Fn::Sub": "arn:aws:sqs:*:*:${serviceName}-*" }
                },
                {
                  "Sid": "StepFunctionHandling",
                  "Effect": "Allow",
                  "Action": "states:StartExecution",
                  "Resource": { "Fn::Sub": "arn:aws:states:*:*:stateMachine:${serviceName}-*" }
                },
                {
                  "Sid": "ApiGatewayUpdateRateLimitApiKeys",
                  "Effect": "Allow",
                  "Action": [
                    "apigateway:GET",
                    "apigateway:PATCH",
                    "apigateway:POST"
                  ],
                  "Resource": [
                    "arn:aws:apigateway:*::/apikeys",
                    "arn:aws:apigateway:*::/apikeys/*",
                    "arn:aws:apigateway:*::/usageplans",
                    "arn:aws:apigateway:*::/usageplans/*"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/"
      }
    },

    "ApiGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Description": { "Ref": "serviceDescription" },
        "Name": { "Ref": "serviceName" },
        "Body": {
          "swagger": "2.0",
          "info": {
            "description": { "Ref": "serviceDescription" },
            "version": "1.0.0",
            "title": { "Ref": "serviceName" }
          },
          "securityDefinitions": {
            "self": {
              "type": "apiKey",
              "name": "Unused",
              "in": "header",
              "x-amazon-apigateway-authtype": "custom",
              "x-amazon-apigateway-authorizer": {
                "type": "request",
                "identitySource": "method.request.header.Authorization, context.domainPrefix",
                "authorizerUri": { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${serviceName}:${!stageVariables.lambdaVersion}/invocations" },
                "authorizerResultTtlInSeconds": 3600
              }
            }
          },
          "x-amazon-apigateway-binary-media-types": [ "application/octet", "image/jpeg", "image/jpg", "image/png", "multipart/form-data", "image/*" ],
          "x-amazon-apigateway-gateway-responses": {
            "DEFAULT_4XX": {
              "responseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'"
              }
            },
            "UNAUTHORIZED": {
              "responseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.WWW-Authenticate": "'Bearer realm=\"https://company.io/\", authorization_uri=\"https://oauth_token_provider.com/oauth/token\"'",
                "gatewayresponse.header.Link": "'https://oauth_token_provider.com/oauth/token;rel=authorization_uri'"
              }
            }
          },
          "x-amazon-apigateway-request-validators": {
            "validate-body": {
              "validateRequestBody": true,
              "validateRequestParameters": false
            }
          },
          "definitions": {},
          "paths": {
            "/": {
              "x-amazon-apigateway-any-method": {
                "produces": [
                  "application/json"
                ],
                "x-amazon-apigateway-integration": {
                  "uri": { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${serviceName}:${!stageVariables.lambdaVersion}/invocations" },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "type": "aws_proxy"
                }
              }
            },
            "/livecheck": {
              "x-amazon-apigateway-any-method": {
                "produces": [
                  "application/json"
                ],
                "responses": {},
                "x-amazon-apigateway-integration": {
                  "uri": { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${serviceName}:${!stageVariables.lambdaVersion}/invocations" },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "type": "aws_proxy"
                }
              }
            },
            "/{proxy+}": {
              "x-amazon-apigateway-any-method": {
                "produces": [
                  "application/json"
                ],
                "security": [{
                  "self": []
                }],
                "parameters": [{
                  "name": "proxy",
                  "in": "path",
                  "required": true,
                  "type": "string"
                }],
                "responses": {},
                "x-amazon-apigateway-integration": {
                  "uri": { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${serviceName}:${!stageVariables.lambdaVersion}/invocations" },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "type": "aws_proxy"
                }
              },
              "options": {
                "parameters": [{
                  "name": "proxy",
                  "in": "path",
                  "required": true,
                  "type": "string"
                }],
                "consumes": [
                  "application/json"
                ],
                "produces": [
                  "application/json"
                ],
                "responses": {
                  "200": {
                    "description": "200 response",
                    "headers": {
                      "Cache-Control": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      }
                    }
                  }
                },
                "x-amazon-apigateway-integration": {
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseParameters": {
                        "method.response.header.Cache-Control": "'public, max-age=86400'",
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
                        "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      }
                    }
                  },
                  "requestTemplates": {
                    "application/json": "{\"statusCode\": 200}"
                  },
                  "passthroughBehavior": "when_no_templates",
                  "type": "mock"
                }
              }
            }
          }
        },
        "EndpointConfiguration": {
          "Types": [ "REGIONAL" ]
        }
      }
    },
    "ApiGatewayInitialDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "Description": "Initial Setup Deployment (WARNING: This resource must stay constant, do not update in CF ever)",
        "RestApiId": { "Ref": "ApiGateway" }
      }
    },
    "ApiGatewayStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "RestApiId": { "Ref": "ApiGateway" },
        "StageName": "production",
        "DeploymentId": { "Ref": "ApiGatewayInitialDeployment" },
        "Variables": {
          "lambdaVersion": "production"
        }
      }
    },

    "AcmCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "Properties": {
        "DomainName": { "Ref": "dnsName" },
        "SubjectAlternativeNames": [
          { "Fn::Sub": "tst-${dnsName}" }
        ],
        "ValidationMethod": "DNS"
      }
    },
    "ServiceDomainName": {
      "Type": "AWS::ApiGateway::DomainName",
      "Properties": {
        "DomainName": { "Ref": "dnsName" },
        "EndpointConfiguration": {
          "Types": [ "REGIONAL" ]
        },
        "RegionalCertificateArn": { "Ref": "AcmCertificate" }
      }
    },
    "BasePathMapping": {
      "Type": "AWS::ApiGateway::BasePathMapping",
      "Properties": {
        "DomainName": { "Ref": "ServiceDomainName" },
        "RestApiId": { "Ref": "ApiGateway" },
        "Stage": { "Ref": "ApiGatewayStage" }
      }
    },
    "Route53MapToCustomDomain": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "DNSName": { "Fn::GetAtt": [ "ServiceDomainName", "RegionalDomainName" ] },
          "HostedZoneId": { "Fn::GetAtt": [ "ServiceDomainName", "RegionalHostedZoneId" ] }
        },
        "HostedZoneName": { "Fn::Sub": "${hostedName}." },
        "Comment": { "Fn::Sub": "Created for service ${serviceName}" },
        "Name": { "Fn::Sub": "${dnsName}." },
        "Type": "A"
      }
    },

    "ServiceDomainNameTst": {
      "Type": "AWS::ApiGateway::DomainName",
      "Properties": {
        "DomainName": { "Fn::Sub": "tst-${dnsName}" },
        "EndpointConfiguration": {
          "Types": [ "REGIONAL" ]
        },
        "RegionalCertificateArn": { "Ref": "AcmCertificate" }
      }
    },
    "BasePathMappingTst": {
      "Type": "AWS::ApiGateway::BasePathMapping",
      "Properties": {
        "DomainName": { "Ref": "ServiceDomainNameTst" },
        "RestApiId": { "Ref": "ApiGateway" }
      }
    },
    "Route53MapToCustomDomainTst": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "DNSName": { "Fn::GetAtt": [ "ServiceDomainNameTst", "RegionalDomainName" ] },
          "HostedZoneId": { "Fn::GetAtt": [ "ServiceDomainNameTst", "RegionalHostedZoneId" ] }
        },
        "HostedZoneName": { "Fn::Sub": "${hostedName}." },
        "Comment": { "Fn::Sub": "Created for service ${serviceName}" },
        "Name": { "Fn::Sub": "tst-${dnsName}." },
        "Type": "A"
      }
    },

    "ApiGatewayRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "",
            [
              { "Ref": "serviceName" },
              "ApiGatewayRole"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "apigateway.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "MicroservicePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "SQSReadAndWrite",
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage",
                    "sqs:ReceiveMessage"
                  ],
                  "Resource": {
                    "Fn::GetAtt": ["SQSWork", "Arn"]
                  }
                }
              ]
            }
          }
        ],
        "Path": "/"
      },
      "DependsOn": ["SQSWork"]
    },

    "CloudWatchRuleSchedulerInvoker": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": { "Ref": "serviceDescription" },
        "Name": { "Fn::Sub": "${serviceName}-Scheduler-prod" },
        "ScheduleExpression": "rate(3 hours)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": { "Ref": "ProductionAlias" },
            "Id": "SchedulerInvokerForLambda"
          }
        ]
      }
    },
    "PermissionForCloudWatchToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Ref": "ProductionAlias" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": [ "CloudWatchRuleSchedulerInvoker", "Arn" ] }
      },
      "DependsOn": "LambdaFunction"
    },

    "SQSWork": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": { "Fn::Sub": "${serviceName}-Work-prod" },
        "MessageRetentionPeriod": 1209600,
        "VisibilityTimeout": 300,
        "ReceiveMessageWaitTimeSeconds": 20
      }
    },
    "EventSourceMapping": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "BatchSize": 10,
        "Enabled": true,
        "EventSourceArn": { "Fn::GetAtt": ["SQSWork", "Arn"] },
        "FunctionName": { "Ref": "ProductionAlias" }
      }
    },

    "DynamoDBTableProd": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": { "Fn::Sub": "${serviceName}-Table-prod" },
        "AttributeDefinitions": [
          {
            "AttributeName": "tableHash",
            "AttributeType": "S"
          },
          {
            "AttributeName": "tableRange",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "tableHash",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "tableRange",
            "KeyType": "RANGE"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "SSESpecification": {
          "SSEEnabled": true
        },
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "TimeToLiveSpecification": {
          "AttributeName": "TTL",
          "Enabled": true
        },
        "Tags": [
          {
            "Key": "Service",
            "Value": { "Ref": "serviceName" }
          }
        ]
      }
    },

    "StepFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": { "Fn::Sub": "${serviceName}StepFunctionRole-${AWS::Region}" },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "states.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "MicroservicePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "ExecuteResources",
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    { "Ref": "ProductionAlias" }
                  ]
                },
                {
                  "Sid": "LogToCloudWatch",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogDelivery",
                    "logs:GetLogDelivery",
                    "logs:UpdateLogDelivery",
                    "logs:DeleteLogDelivery",
                    "logs:ListLogDeliveries",
                    "logs:PutResourcePolicy",
                    "logs:DescribeResourcePolicies",
                    "logs:DescribeLogGroups"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/"
      }
    },

    "CloudWatchLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": { "Fn::Sub": "/aws/lambda/${serviceName}" }
      }
    }
  }
}
