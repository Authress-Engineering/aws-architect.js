{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS Architect Microservice",
  "Parameters": {
    "serviceName": {
      "Type": "String",
      "Description": "The name of the microservice"
    },
    "serviceDescription": {
      "Type": "String",
      "Description": "Service description used for AWS resources"
    },
    "deploymentBucketName": {
      "Type": "String",
      "Description": "The bucket where deployment artifacts are kept"
    },
    "deploymentKeyName": {
      "Type": "String",
      "Description": "The location of the s3 lambda.zip file in the bucket"
    },
    "dnsName": {
      "Type": "String",
      "Default": "",
      "Description": "The service DNS name."
    },
    "hostedName": {
      "Type": "String",
      "Description": "The top level domain name."
    },
    "useRoot": {
      "Type": "String",
      "AllowedValues": ["true", "false"],
      "Default": "false",
      "Description": "Create the service record at the root level."
    }
  },
  "Conditions": {
    "CreateARecordAtRootDomain": {"Fn::Equals": [{"Ref": "useRoot"}, "true"]}
  },

  "Resources": {
    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": { "Ref": "serviceName" },
        "Description": { "Ref": "serviceDescription" },
        "Handler": "index.handler",
        "Runtime": "nodejs8.10",
        "TracingConfig": {
          "Mode": "Active"
        },
        "Code": {
          "S3Bucket": { "Ref": "deploymentBucketName" },
          "S3Key": { "Ref": "deploymentKeyName" }
        },
        "MemorySize": 128,
        "Timeout": 6,
        "Role": { "Fn::GetAtt": ["LambdaRole", "Arn"] },
        "Tags": [
          {
            "Key": "Service",
            "Value": { "Ref": "serviceName" }
          }
        ]
      }
    },
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "",
            [
              { "Ref": "serviceName" },
              "LambdaRole"
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "lambda.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ],
        "Policies": [
          {
            "PolicyName": "MicroservicePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "DynamoDbWrite",
                  "Effect": "Allow",
                  "Action": "dynamodb:*",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:dynamodb:*:*:table/",
                        { "Ref": "serviceName" },
                        "-*"
                      ]
                    ]
                  }
                },
                {
                  "Sid": "SQSReader",
                  "Effect": "Allow",
                  "Action": "sqs:*",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:sqs:*:*:",
                        { "Ref": "serviceName" },
                        "-*"
                      ]
                    ]
                  }
                },
                {
                  "Sid": "ReadWriteS3Configuration",
                  "Effect": "Allow",
                  "Action": "s3:*",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        { "Ref": "AWS::AccountId"},
                        ".",
                        { "Ref": "serviceName" },
                        ".",
                        { "Ref": "hostedName" },
                        "*"
                      ]
                    ]
                  }
                },
                {
                  "Sid": "ListObjectsForS3Configuration",
                  "Effect": "Allow",
                  "Action": "s3:ListObjects",
                  "Resource": "*"
                },
                {
                  "Sid": "AsyncExecutionPolicy",
                  "Effect": "Allow",
                  "Action": "lambda:InvokeFunction",
                  "Resource": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn:aws:lambda",
                        { "Ref": "AWS::Region"},
                        { "Ref": "AWS::AccountId"},
                        "function",
                        { "Ref": "serviceName" },
                        "production"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ],
        "Path": "/"
      }
    },
    "ApiGateway": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Description": { "Ref": "serviceDescription" },
        "Name": { "Ref": "serviceName" }, 
        "Body": {
          "swagger": "2.0",
          "info": {
            "description": { "Ref": "serviceDescription" },
            "version": "1.0.0",
            "title": { "Ref": "serviceName" }
          },
          "securityDefinitions": {
            "auth0": {
              "type": "apiKey",            
              "name": "Authorization",          
              "in": "header",               
              "x-amazon-apigateway-authtype": "oauth2", 
              "x-amazon-apigateway-authorizer": {     
                "type": "request",
                "identitySource": "method.request.header.Authorization",
                "authorizerUri": {
                  "Fn::Join": [
                    ":",
                    [
                      "arn:aws:apigateway",
                      { "Ref": "AWS::Region" },
                      "lambda:path/2015-03-31/functions/arn:aws:lambda",
                      { "Ref": "AWS::Region" },
                      { "Ref": "AWS::AccountId" },
                      "function",
                      { "Ref": "serviceName" },
                      "${stageVariables.lambdaVersion}/invocations"
                    ]
                  ]
                },
                "authorizerResultTtlInSeconds": 120
              }
            }
          },
          "x-amazon-apigateway-binary-media-types": [ "application/octet", "image/jpeg", "image/jpg", "image/png", "multipart/form-data", "image/*" ],
          "x-amazon-apigateway-gateway-responses": {
            "DEFAULT_4XX": {
              "responseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'"
              }
            },
            "UNAUTHORIZED": {
              "responseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.WWW-Authenticate": "'Bearer realm=\"https://company.io/\", authorization_uri=\"https://oauth_token_provider.com/oauth/token\"'",
                "gatewayresponse.header.Link": "'https://oauth_token_provider.com/oauth/token;rel=authorization_uri'"
              }
            }
          },
          "paths": {
            "/livecheck": {
              "x-amazon-apigateway-any-method": {
                "produces": [
                  "application/json"
                ],
                "responses": {},
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn:aws:apigateway",
                        { "Ref": "AWS::Region" },
                        "lambda:path/2015-03-31/functions/arn:aws:lambda",
                        { "Ref": "AWS::Region" },
                        { "Ref": "AWS::AccountId" },
                        "function",
                        { "Ref": "serviceName" },
                        "${stageVariables.lambdaVersion}/invocations"
                      ]
                    ]
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "type": "aws_proxy"
                }
              }
            },
            "/.well-known/openapi.json": {
              "x-amazon-apigateway-any-method": {
                "produces": [
                  "application/json"
                ],
                "responses": {},
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn:aws:apigateway",
                        { "Ref": "AWS::Region" },
                        "lambda:path/2015-03-31/functions/arn:aws:lambda",
                        { "Ref": "AWS::Region" },
                        { "Ref": "AWS::AccountId" },
                        "function",
                        { "Ref": "serviceName" },
                        "${stageVariables.lambdaVersion}/invocations"
                      ]
                    ]
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "type": "aws_proxy"
                }
              }
            },
            "/{proxy+}": {
              "x-amazon-apigateway-any-method": {
                "produces": [
                  "application/json"
                ],
                "security": [{
                  "auth0": []
                }],
                "parameters": [{
                  "name": "proxy",
                  "in": "path",
                  "required": true,
                  "type": "string"
                }],
                "responses": {},
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn:aws:apigateway",
                        { "Ref": "AWS::Region" },
                        "lambda:path/2015-03-31/functions/arn:aws:lambda",
                        { "Ref": "AWS::Region" },
                        { "Ref": "AWS::AccountId" },
                        "function",
                        { "Ref": "serviceName" },
                        "${stageVariables.lambdaVersion}/invocations"
                      ]
                    ]
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "type": "aws_proxy"
                }
              },
              "options": {
                "produces": [
                  "application/json"
                ],
                "parameters": [{
                  "name": "proxy",
                  "in": "path",
                  "required": true,
                  "type": "string"
                }],
                "responses": {},
                "x-amazon-apigateway-integration": {
                  "uri": {
                    "Fn::Join": [
                      ":",
                      [
                        "arn:aws:apigateway",
                        { "Ref": "AWS::Region" },
                        "lambda:path/2015-03-31/functions/arn:aws:lambda",
                        { "Ref": "AWS::Region" },
                        { "Ref": "AWS::AccountId" },
                        "function",
                        { "Ref": "serviceName" },
                        "${stageVariables.lambdaVersion}/invocations"
                      ]
                    ]
                  },
                  "passthroughBehavior": "when_no_match",
                  "httpMethod": "POST",
                  "type": "aws_proxy"
                }
              }
            }
          }
        },
        "EndpointConfiguration": {
          "Types": [ "REGIONAL" ]
        }
      },
      "DependsOn": "LambdaFunction"
    },
    "StageDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Deployment for",
              { "Ref": "deploymentKeyName" }
            ]
          ]
        },
        "RestApiId": { "Ref": "ApiGateway" },
        "StageDescription": {
          "Variables": {
            "lambdaVersion": "production"
          }
        },
        "StageName": "production"
      }
    },
    "GetExistingAcmCertificateArnRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["lambda.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AWSCertificateManagerFullAccess"
        ]
      }
    },
    "GetExistingAcmCertificateArnLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [ "\n", [
              "// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html",
              "const aws = require('aws-sdk');",
              "const cloudFormationResponseHandler = require('cfn-response');",
              "exports.handler = function(event, context) {",
              "  let domainName = event.ResourceProperties.DomainName;",
              "  let region = event.ResourceProperties.Region;",
              "  let acmClient = new aws.ACM({ region: region });",
              "  return acmClient.listCertificates({}).promise()",
              "    .then(certs => {",
              "      let foundCert = certs.CertificateSummaryList.find(cert => cert.DomainName === domainName);",
              "      return foundCert ? foundCert.CertificateArn: null;",
              "    })",
              "    .then(certArn => {",
              "      if (!certArn) {",
              "        return cloudFormationResponseHandler.send(event, context, cloudFormationResponseHandler.FAILED, { title: 'No certificate exist', error: error });",
              "      }",
              "      return cloudFormationResponseHandler.send(event, context, cloudFormationResponseHandler.SUCCESS, { CertificateArn: certArn });",
              "    })",
              "    .catch(error => {",
              "      return cloudFormationResponseHandler.send(event, context, cloudFormationResponseHandler.FAILED, { title: 'Failed to get Certificate', error: error });",
              "    });",
              "}"
            ]]
          }
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": { "Fn::GetAtt": [ "GetExistingAcmCertificateArnRole", "Arn" ] }
      }
    },
    "DynamicAcmCertificate": {
      "Type": "Custom::LambdaCallout",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "GetExistingAcmCertificateArnLambdaFunction", "Arn" ] },
        "DomainName": { "Ref": "hostedName" },
        "Region": {
          "Fn::If": [
            "CreateARecordAtRootDomain",
            { "Ref": "AWS::Region" },
            "us-east-1"
          ]
        }
      }
    },
    "ServiceDomainName": {
      "Type": "AWS::ApiGateway::DomainName",
      "Properties": {
        "DomainName": {
          "Fn::If": [
            "CreateARecordAtRootDomain",
            { "Ref": "hostedName" },
            {
              "Fn::Join": [
                ".",
                [
                  { "Ref": "dnsName" },
                  { "Ref": "hostedName" }
                ]
              ]
            }
          ]
        },
        "EndpointConfiguration": {
          "Types": [ "REGIONAL" ]
        },
        "RegionalCertificateArn": { "Fn::GetAtt": [ "DynamicAcmCertificate", "CertificateArn" ] }
      }
    },
    "ServiceDomainNameTst": {
      "Type": "AWS::ApiGateway::DomainName",
      "Properties": {
        "DomainName": {
          "Fn::If": [
            "CreateARecordAtRootDomain",
            {
              "Fn::Join": [
                ".",
                [
                  "tst",
                  { "Ref": "hostedName" }
                ]
              ]
            },
            {
              "Fn::Join": [
                "",
                [
                  "tst-",
                  { "Ref": "dnsName" },
                  ".",
                  { "Ref": "hostedName" }
                ]
              ]
            }
          ]
        },
        "EndpointConfiguration": {
          "Types": [ "REGIONAL" ]
        },
        "RegionalCertificateArn": { "Fn::GetAtt": [ "DynamicAcmCertificate", "CertificateArn" ] }
      }
    },
    "GetRoute53ConfigurationInformationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": ["lambda.amazonaws.com"]
            },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator"
        ]
      }
    },
    "GetRoute53ConfigurationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [ "\n", [
              "// http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html",
              "const cloudFormationResponseHandler = require('cfn-response');",
              "const aws = require('aws-sdk');",
              "exports.handler = function(event, context) {",
              "  if (event.RequestType === 'Delete') {",
              "    return cloudFormationResponseHandler.send(event, context, cloudFormationResponseHandler.SUCCESS);",
              "  }",
              "  let domainName = event.ResourceProperties.DomainName;",
              "  let apiGatewayClient = new aws.APIGateway();",
              "  return apiGatewayClient.getDomainName({ domainName: domainName }).promise()",
              "  .then(response => {",
              "    return cloudFormationResponseHandler.send(event, context, cloudFormationResponseHandler.SUCCESS, { 'DistributionDomainName': response.regionalDomainName || response.distributionDomainName, 'HostedZone': response.regionalHostedZoneId || response.distributionHostedZoneId });",
              "  }, failure => {",
              "    return cloudFormationResponseHandler.send(event, context, cloudFormationResponseHandler.FAILED, { 'Error': failure });",
              "  });",
              "};"
            ]]
          }
        },
        "Handler": "index.handler",
        "Runtime": "nodejs6.10",
        "Timeout": "30",
        "Role": { "Fn::GetAtt": [ "GetRoute53ConfigurationInformationRole", "Arn" ] }
      }
    },
    "GetRoute53ConfigurationFromLambdaFunction": {
      "Type": "Custom::LambdaCallout",
      "DeletionPolicy": "Retain",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "GetRoute53ConfigurationLambdaFunction", "Arn" ] },
        "DomainName": { "Ref": "ServiceDomainName" }
      }
    },
    "Route53MapToCustomDomain": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "DNSName": { "Fn::GetAtt": [ "GetRoute53ConfigurationFromLambdaFunction", "DistributionDomainName" ] },
          "HostedZoneId": { "Fn::GetAtt": [ "GetRoute53ConfigurationFromLambdaFunction", "HostedZone" ] }
        },
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "hostedName"
              },
              "."
            ]
          ]
        },
        "Comment": {
          "Fn::Join": [
            "",
            [
              "Created for service",
              { "Ref": "serviceName" }
            ]
          ]
        },
        "Name": {
          "Fn::If": [
            "CreateARecordAtRootDomain",
            {
              "Fn::Join": [
                "",
                [
                  { "Ref": "hostedName" },
                  "."
                ]
              ]
            },
            {
              "Fn::Join": [
                ".",
                [
                  { "Ref": "dnsName" },
                  { "Ref": "hostedName" },
                  ""
                ]
              ]
            }
          ]
        },
        "Type": "A"
      }
    },
    "GetRoute53ConfigurationFromLambdaFunctionTst": {
      "Type": "Custom::LambdaCallout",
      "DeletionPolicy": "Retain",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt": [ "GetRoute53ConfigurationLambdaFunction", "Arn" ] },
        "DomainName": { "Ref": "ServiceDomainNameTst" }
      }
    },
    "Route53MapToCustomDomainTst": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "DNSName": { "Fn::GetAtt": [ "GetRoute53ConfigurationFromLambdaFunctionTst", "DistributionDomainName" ] },
          "HostedZoneId": { "Fn::GetAtt": [ "GetRoute53ConfigurationFromLambdaFunctionTst", "HostedZone" ] }
        },
        "HostedZoneName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "hostedName"
              },
              "."
            ]
          ]
        },
        "Comment": {
          "Fn::Join": [
            "",
            [
              "Created for service",
              { "Ref": "serviceName" }
            ]
          ]
        },
        "Name": {
          "Fn::If": [
            "CreateARecordAtRootDomain",
            {
              "Fn::Join": [
                "",
                [
                  "tst.",
                  { "Ref": "hostedName" },
                  "."
                ]
              ]
            },
            {
              "Fn::Join": [
                "",
                [
                  "tst-",
                  { "Ref": "dnsName" },
                  ".",
                  { "Ref": "hostedName" },
                  "."
                ]
              ]
            }
          ]
        },
        "Type": "A"
      }
    },
    "BasePathMapping": {
      "Type": "AWS::ApiGateway::BasePathMapping",
      "Properties": {
        "DomainName": {
          "Fn::If": [
            "CreateARecordAtRootDomain",
            { "Ref": "hostedName" },
            {
              "Fn::Join": [
                ".",
                [
                  { "Ref": "dnsName" },
                  { "Ref": "hostedName" }
                ]
              ]
            }
          ]
        },
        "RestApiId": { "Ref": "ApiGateway" },
        "Stage": "production"
      },
      "DependsOn": ["StageDeployment", "ServiceDomainName"]
    },
    "BasePathMappingTst": {
      "Type": "AWS::ApiGateway::BasePathMapping",
      "Properties": {
        "DomainName": {
          "Fn::If": [
            "CreateARecordAtRootDomain",
            {
              "Fn::Join": [
                ".",
                [
                  "tst",
                  { "Ref": "hostedName" }
                ]
              ]
            },
            {
              "Fn::Join": [
                "",
                [
                  "tst-",
                  { "Ref": "dnsName" },
                  ".",
                  { "Ref": "hostedName" }
                ]
              ]
            }
          ]
        },
        "RestApiId": { "Ref": "ApiGateway" }
      },
      "DependsOn": ["StageDeployment", "ServiceDomainNameTst"]
    },
    "PermissionForAPIGatewayToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::Join": [
            "",
            [
              { "Fn::GetAtt": [ "LambdaFunction", "Arn" ] }
            ]
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com"
      },
      "DependsOn": "LambdaFunction"
    }
  }
}
